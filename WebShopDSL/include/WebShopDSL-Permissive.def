
definition

module Common
exports
  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR

  lexical syntax
    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover}
    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
    ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR {recover}
    "*"                            -> WATERTOKENSTAR      {recover}
    WATERTOKEN                     -> WATER               
    WATERTOKENSEPARATOR            -> WATER               
    WATERTOKENSTAR                 -> WATER               

  lexical restrictions
    WATERTOKEN -/- [A-Za-z0-9\_]
    WATERTOKENSTAR -/- [\/]

  context-free syntax
    WATER -> LAYOUT {cons("WATER")}

  (

  sorts WATEREOF

  lexical restrictions
    WATEREOF -/- ~[]

  lexical syntax
    %% Lexical insertion recovery rules                                  
    "\""                                            -> INSERTOPENQUOTE29 {recover}
    INSERTOPENQUOTE29 StringChar* "\n"              -> STRING            {cons("INSERTEND")}
    INSERTOPENQUOTE29 StringChar* WATEREOF          -> STRING            {cons("INSERTEND")}
    "/*"                                            -> INSERTSTART29     {recover}
    INSERTSTART29 ( ~[\*] | CommentChar )* WATEREOF -> LAYOUT            {cons("INSERTEND")}
                                                    -> "shop"            {recover, cons("INSERTION")}
                                                    -> "{"               {recover, cons("INSERTION")}
                                                    -> "}"               {recover, cons("INSERTION")}
                                                    -> ","               {recover, cons("INSERTION")}

  syntax
    %% Kernel syntax insertion recovery rules   

  )

  (

  lexical syntax
    [a-zA-Z] [a-zA-Z0-9\_]*            -> ID            
    "-"? [0-9]+                        -> INT           
    "\"" StringChar* "\""              -> STRING        
    ~[\"\n]                            -> StringChar    
    "\\\""                             -> StringChar    
    BackSlashChar                      -> StringChar    
    "\\"                               -> BackSlashChar 
    [\ \t\n\r]                         -> LAYOUT        
    [\*]                               -> CommentChar   
    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT        
    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT        
                                       -> EOF           

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    EOF -/- ~[]
    BackSlashChar -/- [\"]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

  )

module WebShopDSL
imports Common

exports
  context-free start-symbols
    Start

  context-free syntax
    "shop" ID "{" With* Sells "}" ProductType*     -> Start           {cons("Shop")}
    "with" SupportedClause STRING                  -> With            {cons("With")}
    "logo"                                         -> SupportedClause {cons("ShopLogo")}
    "title"                                        -> SupportedClause {cons("ShopTitle")}
    "description"                                  -> SupportedClause {cons("ShopDescription")}
    "sells" "{" ( ID "," )* ID "}"                 -> Sells           {cons("Sells")}
    "product type" ID "{" Property* "}"            -> ProductType     {cons("Product")}
    SimpleProperty                                 -> Property        
    ComplexProperty                                -> Property        
    ListProperty                                   -> Property        
    ID ":" SimpleType ( "(" AttributeList ")" )?   -> SimpleProperty  {cons("SimpleProperty")}
    ID ":" ComplexType ( "(" AttributeList ")" )?  -> ComplexProperty {cons("ComplexProperty")}
    ID "::" SimpleType ( "(" AttributeList ")" )?  -> ListProperty    {cons("ListOfSimple")}
    ID "::" ComplexType ( "(" AttributeList ")" )? -> ListProperty    {cons("ListOfComplex")}
    "String"                                       -> SimpleType      {cons("String")}
    "Int"                                          -> SimpleType      {cons("Int")}
    "Date"                                         -> SimpleType      {cons("Date")}
    "Float"                                        -> SimpleType      {cons("Float")}
    "Image"                                        -> SimpleType      {cons("Image")}
    "LongString"                                   -> SimpleType      {cons("LongString")}
    "Email"                                        -> SimpleType      {cons("Email")}
    "{" SimpleProperty* "}"                        -> ComplexType     
    ( Attribute "," )* Attribute                   -> AttributeList   {cons("AttributeList")}
    ID ":" STRING                                  -> Attribute       {cons("Attribute")}