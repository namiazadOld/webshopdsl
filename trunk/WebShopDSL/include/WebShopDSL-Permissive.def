
definition

module Common
exports
  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR

  lexical syntax
    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover}
    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
    ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR {recover}
    "*"                            -> WATERTOKENSTAR      {recover}
    WATERTOKEN                     -> WATER               
    WATERTOKENSEPARATOR            -> WATER               
    WATERTOKENSTAR                 -> WATER               

  lexical restrictions
    WATERTOKEN -/- [A-Za-z0-9\_]
    WATERTOKENSTAR -/- [\/]

  context-free syntax
    WATER -> LAYOUT {cons("WATER")}

  (

  sorts WATEREOF

  lexical restrictions
    WATEREOF -/- ~[]

  lexical syntax
    %% Lexical insertion recovery rules                                
    "\""                                           -> INSERTOPENQUOTE0 {recover}
    INSERTOPENQUOTE0 StringChar* "\n"              -> STRING           {cons("INSERTEND")}
    INSERTOPENQUOTE0 StringChar* WATEREOF          -> STRING           {cons("INSERTEND")}
    "/*"                                           -> INSERTSTART0     {recover}
    INSERTSTART0 ( ~[\*] | CommentChar )* WATEREOF -> LAYOUT           {cons("INSERTEND")}
                                                   -> "shop"           {recover, cons("INSERTION")}
                                                   -> "{"              {recover, cons("INSERTION")}
                                                   -> "}"              {recover, cons("INSERTION")}
                                                   -> ","              {recover, cons("INSERTION")}
                                                   -> "type"           {recover, cons("INSERTION")}

  syntax
    %% Kernel syntax insertion recovery rules   

  )

  (

  lexical syntax
    [a-zA-Z] [a-zA-Z0-9\_]*            -> ID            
    "-"? [0-9]+                        -> INT           
    "\"" StringChar* "\""              -> STRING        
    ~[\"\n]                            -> StringChar    
    "\\\""                             -> StringChar    
    BackSlashChar                      -> StringChar    
    "\\"                               -> BackSlashChar 
    [\ \t\n\r]                         -> LAYOUT        
    [\*]                               -> CommentChar   
    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT        
    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT        
                                       -> EOF           

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    EOF -/- ~[]
    BackSlashChar -/- [\"]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

  )

module WebShopDSL
imports Common

exports
  context-free start-symbols
    Start

  context-free syntax
    "shop" ID "{" ShopProperty* Sells BasicProductType* ProductType* GroupByType? GroupByProperty* "}" -> Start                 {cons("Shop")}
    SupportedShopProperty STRING                                                                       -> ShopProperty          {cons("ShopProperty")}
    "logo"                                                                                             -> SupportedShopProperty {cons("ShopLogo")}
    "title"                                                                                            -> SupportedShopProperty {cons("ShopTitle")}
    "description"                                                                                      -> SupportedShopProperty {cons("ShopDescription")}
    "sells" "{" ( Entity "," )* Entity "}"                                                             -> Sells                 {cons("Sells")}
    "product" "type" ID ( ":" ID )? "{" Property* "}"                                                  -> ProductType           {cons("Product")}
    "basic" "product" "type" ID "{" Property* "}"                                                      -> ProductType           {cons("BasicProduct")}
    SimpleProperty                                                                                     -> Property              
    ComplexProperty                                                                                    -> Property              
    ListProperty                                                                                       -> Property              
    ID ":" SimpleType ( "(" AttributeList ")" )?                                                       -> SimpleProperty        {cons("SimpleProperty")}
    ID ":" ComplexType ( "(" AttributeList ")" )?                                                      -> ComplexProperty       {cons("ComplexProperty")}
    ID "[]" ":" ComplexType ( "(" AttributeList ")" )?                                                 -> ListProperty          {cons("ListOfComplex")}
    "String"                                                                                           -> SimpleType            {cons("String")}
    "Int"                                                                                              -> SimpleType            {cons("Int")}
    "Date"                                                                                             -> SimpleType            {cons("Date")}
    "Float"                                                                                            -> SimpleType            {cons("Float")}
    "Image"                                                                                            -> SimpleType            {cons("Image")}
    "LongString"                                                                                       -> SimpleType            {cons("LongString")}
    "Email"                                                                                            -> SimpleType            {cons("Email")}
    ID "{" SimpleProperty* "}"                                                                         -> ComplexType           {cons("ComplexType")}
    ( Attribute "," )* Attribute                                                                       -> AttributeList         {cons("AttributeList")}
    ID ":" STRING                                                                                      -> Attribute             {cons("Attribute")}
    ID                                                                                                 -> Entity                {cons("ProductEntity")}
    "group" "by" "type"                                                                                -> GroupByType           {cons("GroupByType")}
    "group" "by" "property" ID "." ID                                                                  -> GroupByProperty       {cons("GroupByProperty")}