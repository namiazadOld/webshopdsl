module pages
	imports include/WebShopDSL
	  		libstratego-lib
  			libstratego-gpp
  			libstratego-aterm
  			lib/editor-common.generated
  			generate-wdsl

rules

		pg : Shop(shopName, with*, sells, basicType*, productType*, groupByType, groupByProp*) ->
			$[
				section productPages

				[createProductTypeMapping]
				[editProductTypeMapping]
				section leftcategoriesmenu

				define leftsidemenu(){

					<div id="accordion">
						[groupByTypeMapping]
						[groupByPropertyMapping]
					</div>
				}

				[<listByType(|productType*)> groupByType]
				[<map(listByProperty(|productType*));concat-strings> groupByProp*]
				

			]
			with 
				debug(!1);createProductTypeMapping := <map(pg);concat-strings>productType*;
			 	debug(!2);editProductTypeMapping:=<map(pgEdit);concat-strings>productType*;
			 	debug(!3);groupByTypeMapping := <leftMenuByType(|productType*)>groupByType;
			 	debug(!4);groupByPropertyMapping:= <map(leftMenuByProperty);concat-strings> groupByProp* 

		pg	:	BasicProduct(name, prop*) -> ""

		pg	: 	Product(name, base, prop*) -> <createPage(| base, prop*)>name

		pgEdit	:	BasicProduct(name, prop*) -> ""

		pgEdit	: 	Product(name, base, prop*) -> <editPage(| base, prop*)>name



		complexCRUDPages: l@ListOfComplex(name, ComplexType(typeName, prop*), attr*) -> <createPage(| None(), prop*)>typeName

		complexCRUDPages: l@ComplexProperty(name, ComplexType(typeName, prop*), attr*) -> <createPage(| None(), prop*)>typeName

		complexCRUDPages: l@SimpleProperty(name, type, attr*) -> $[]

		complexEditPages: l@ListOfComplex(name, ComplexType(typeName, prop*), attr*) -> <editPage(| None(), prop*)>typeName

		complexEditPages: l@ComplexProperty(name, ComplexType(typeName, prop*), attr*) -> <editPage(| None(), prop*)>typeName

		complexEditPages: l@SimpleProperty(name, type, attr*) -> $[]

		
		baseCheck(|entity) : None() -> ""
		baseCheck(|entity) : Some(base) -> basic
		with 
		debug(!550);baseProp* := <BasicProductMap> base ;
		debug(!551); basic := <map(pg(|entity))>baseProp*;
		debug(!552)
		

		baseCheck2(|entity) : None() -> ""
		baseCheck2(|entity) : Some(base) -> basic
		with debug(!580);baseProp* := <BasicProductMap> base;
		debug(!581);basic := <map(fieldDetailsUI(|entity) <+ debug(!"fieldDetailsUI failed on: ");fail);concat-strings>baseProp*;debug(!3)
		
		
		baseCheckProfile(|entity) : None() -> ""
		baseCheckProfile(|entity) : Some(base) -> basic
		with debug(!580);baseProp* := <BasicProductMap> base;
		debug(!581);basic := <map(fieldProfileUI(|entity) <+ debug(!"fieldProfileUI failed on: ");fail);concat-strings>baseProp*;debug(!3)


		pg(|entity): SimpleProperty(name, type, attr*) ->
		$[
				par{ label("[name] "){ input([entity].[name]) } }
		]
		pg(|entity): ComplexProperty(name, type, attr*) ->  $[
				par{ label("[name] "){ input([entity].[name]) } }
		]
		pg(|entity): ListOfComplex(name, type, attr*) -> $[
				par{ label("[name] "){ input([entity].[name]) } }
		]

		leftMenuByProperty: GroupByProperty(base, prop) -> $[

			<div>
				<h3><a href="#">output("By [propTypeName]")</a></h3>
				<div>

					<ul>
						for([varname] :[propTypeName] ){
							<li> navigate(listBy[propTypeName]([varname])){ output([varname])} </li>
						}
					</ul>
				</div>
			</div>
		]
		with varname:= <lower-case>prop
		with c@ComplexProperty(propName, ComplexType(propTypeName, prop*), attr*) := <GetProperty><concat-strings>[base, ".", prop]

		leftMenuByType(|productType*) : None() -> $[]
		leftMenuByType(|productType*): Some(GroupByType()) -> $[

			<div>
				<h3><a href="#">output("By Product")</a></h3>
				<div>

					<ul>
						[<map(leftMenuByTypeContent);concat-strings> productType* ]
					</ul>
				</div>
			</div>
		]

		leftMenuByTypeContent : BasicProduct(name, prop*) -> $[]
		leftMenuByTypeContent : Product(name, base, prop*) -> $[
			<li> navigate(listBy[name]()){ output("[name]")} </li>
		]

		createPage(|base, prop*): name ->  $[define page create[name]() {
			init { }
			var [ varname ]:= [name]{};
			main
			define body(){
				section {
					header {"Create New [name]"}
					form{
						[baseCheckMapping]
						[<map(pg(|varname))>prop*]
						submit create([varname]) {"Create" }
					}
				}
			}

			action create([varname] : [name])
			{

				[varname].save();
				log("[name]Creation Log: " + [varname]);
				message("[name] has been created successfully.");

				return create[name]();
			}
		}

		define [varname]Detail([varname]: [name])
		{
			<div class="ui-widget ui-widget-container" >
				<h3 class="ui-widget ui-widget-header  ui-corner-top">output([varname].name)</h3>

				<div id="cdSummary" class="ui-widget ui-widget-content ui-corner-bottom">

		  			[<baseCheck2(|varname)>base]
		  			[detailsUI]
	 				navigate([varname]Profile([varname])){output(">>See more information")}
		  		</div>
	  		</div>
		}
		
		define page [varname]Profile([varname]: [name])
		{
			init {}
			main()
			define body()
			{
				section
				{
					header {output([varname].name)}
					form
					{
						<div class="ui-widget ui-widget-container" >
							<h3 class="ui-widget ui-widget-header  ui-corner-top">output([varname].name)</h3>
	
							<div id="cdSummary" class="ui-widget ui-widget-content ui-corner-bottom">
	
			  				[<baseCheckProfile(|varname)>base]
			  				[profileUI]
		 					navigate(edit[name]([varname])){output("Edit")}
			  				</div>
	  					</div>
					}
				}
			}
		}
		
		[<map(complexCRUDPages)>prop*]

		[<map(complexEditPages)>prop*]

		]
		with varname:= <lower-case>name;
			debug(!199);baseCheckMapping:= <baseCheck(|varname)>base;
			debug(!200);detailsUI := <map(fieldDetailsUI(|varname));concat-strings>prop*;
			debug(!201);profileUI := <map(fieldProfileUI(|varname));concat-strings>prop*;
			debug(!202)


		editPage(|base, prop*): name ->  $[
			define page edit[name]([varname] : [name]) {
			init { }
			main
			define body(){
				section {
					header {"Edit [name]"}
					form{
						[<baseCheck(|varname)>base]
						[<map(pg(|varname))>prop*]
						submit edit([varname]) {"Edit" }
					}
				}
			}

			action edit([varname] : [name])
			{

				[varname].save();
				log("[name]Creation Log: " + [varname]);
				message("[name] has been changed successfully.");

				return [varname]Profile([varname]);
			}
		} ]
		with varname:= <lower-case>name
		
		fieldProfileUI(|varname) : a@SimpleProperty(propName, type, None()) -> ""
		fieldProfileUI(|varname) : a@SimpleProperty(propName, type, Some(attr*)) -> $[
			par {output("[propName] : " + [varname].[propName]) }
		]

		fieldProfileUI(|varname) : a@ComplexProperty(propName, type, None()) -> ""
		fieldProfileUI(|varname) : a@ComplexProperty(propName, type, Some(attr*)) -> $[
			if ([varname].[propName] != null)
			{
				par{	output("[propName] : " + [varname].[propName].name)}
	  		}
		]
		
		fieldProfileUI(|varname) : a@ListOfComplex(propName, type, None()) -> ""
		fieldProfileUI(|varname) : a@ListOfComplex(propName, ComplexType(propType, prop*), Some(attr*)) -> $[
			if ([varname].[propName] != null)
			{
				<strong>output("List of [propName]:")</strong>
  					for ([value]: [propType] in [varname].[propName])
  					{
  						par{output([value].name)}
  					}
	  		}
		]
		with value:= $[value]

		fieldDetailsUI(|varname) : a@SimpleProperty(propName, type, None()) -> ""
				
		fieldDetailsUI(|varname) : a@SimpleProperty(propName, type, Some(attr*)) -> result
		with
			debug(!300); result:=<ruleSimple1(|varname, propName)> attr*; debug(!301)
		
		fieldDetailsUI(|varname) : ComplexProperty(propName, type, None()) -> ""
		
		fieldDetailsUI(|varname) : ComplexProperty(propName, type, Some(attr*)) -> result
			with 
				debug(!310); result := <ruleComplex1(|varname, propName)> attr*; debug(!311)
		fieldDetailsUI(|varname) : ListOfComplex(propName, ComplexType(type, prop*), Some(attr*)) -> result
			with
				debug(!320);result :=  <ruleListOfComplex1(|varname, propName, type)> attr*;
				debug(!321)

		ruleSimple1 (|varname, propName) : AttributeList(attr*, attr) -> result
		with 
			 debug(!400);r1 := <map(ruleSimple2(|varname, propName));concat-strings>attr*;
			 debug(!401);r2 := <ruleSimple2(|varname, propName)> attr;
			 debug(!402);result := <concat-strings>[r1, r2]; 
			 debug(!403)
		
		
		ruleSimple2(|varname, propName) : Attribute("summary", "\"true\"") -> $[
	  					par {output("[propName] : " + [varname].[propName]) }


		]
		ruleSimple2(|varname, propName) : Attribute(t1, t2) -> $[]

		ruleComplex1 (|varname, propName) : AttributeList(attr*, attr) -> result
		with r1 := <map(ruleComplex2(|varname, propName));concat-strings>attr*;
			 r2 := <ruleComplex2(|varname, propName)> attr;
			 result := <concat-strings>[r1, r2]
		ruleComplex2(|varname, propName) : Attribute("summary", "\"true\"") -> $[
			if ([varname].[propName] != null)
			{

		  				par{	output("[propName] : " + [varname].[propName].name)}
	  		}

		]
		ruleComplex2(|varname, propName) : Attribute(t1, t2) -> $[]

		ruleListOfComplex1 (|varname, propName, propType) : a@AttributeList(attr*, attr) -> result
		with r1 := <map(ruleListOfComplex2(|varname, propName, propType));concat-strings>attr*;
			 r2 := <ruleListOfComplex2(|varname, propName, propType)> attr;
			 result := <concat-strings>[r1, r2]
		ruleListOfComplex2(|varname, propName, propType) : Attribute("summary", "\"true\"") -> $[
			if ([varname].[propName] != null)
			{
				<strong>output("List of [propName]:")</strong>
  					for ([value]: [propType] in [varname].[propName])
  					{
  						par{output([value].name)}
  					}
	  		}

		]
		with value:= $[value]
		ruleListOfComplex2(|varname, propName, propType) : Attribute(t1, t2) -> $[]


		//Filter the product on special base
		for-each(|b, prop, value) : Product(name, [b], prop*) -> $[
				for(entity :[name] where entity.[prop] == [value])
				{
					[lower]Detail(entity)
				}
			]
		with lower:= <lower-case>name
		for-each(|b, prop, value) : Product(name, base, prop*) -> $[]
		for-each(|b, prop, value) : BasicProduct(name, prop*) -> $[]



		listByProperty(|productType*) : GroupByProperty(basicProduct, prop) -> $[
		define page listBy[propTypeName]([value] : [propTypeName]){
			main()
			define body(){
				<div id="listAccordion">
					[<map(for-each(|basicProduct, prop, value));concat-strings>productType*]
				</div>
			}
		}
		]
		with c@ComplexProperty(propName, ComplexType(propTypeName, prop*), attr*) := <GetProperty><concat-strings>[basicProduct, ".", prop]
		with value := "value"

		for-eachType() : Product(name, base, prop*) -> $[
				for(entity :[name])
				{
					[lower]Detail(entity)
				}
			]
		with lower:= <lower-case>name
		for-eachType() : BasicProduct(name, prop*) -> $[]


		createTypeListPage : BasicProduct(name, prop*) -> $[]
		createTypeListPage : Product(name, base, prop*) -> $[
			define page listBy[name](){
				main()
				define body(){
					<div id="listAccordion">
						for(entity :[name])
						{
								[lower]Detail(entity)
						}
					</div>
				}
			}
		]
		with lower:= <lower-case>name

		listByType(|productType*) : None() -> $[]
		listByType(|productType*) : Some(GroupByType()) -> $[
			[<map(createTypeListPage);concat-strings>productType*]
		]
		with value := "value"


